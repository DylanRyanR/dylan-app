# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # - name: BuildDockerImage
    #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
    # login to ACR
    - name: Login to Aliyun Container Registry (ACR)
      uses: aliyun/acr-login@v1 # 使用阿里云镜像服务action
      with:
        login-server: registry.cn-hangzhou.aliyuncs.com # 务必正确填写镜像容器服务的登录地址
        region-id: cn-hangzhou # 务必正确填写镜像容器服务的登录地址
        username: ${{ secrets.ALI_REPO }}
        password: ${{ secrets.ALI_REPO_PWD }}
    # build image and push to ACR
    - name: Build and Push Docker Image
      env:
        IMAGE_TAG: latest # 用于标记容器版本号
      run: |
        docker build -t registry.cn-hangzhou.aliyuncs.com/dylan-ryan/dylan-app:$IMAGE_TAG .
        docker push registry.cn-hangzhou.aliyuncs.com/dylan-ryan/dylan-app:$IMAGE_TAG
